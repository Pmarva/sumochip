#!/usr/bin/python

from CHIP_IO import GPIO
from CHIP_IO import SOFTPWM as PWM
import sys
import signal
import os
from time import sleep
from ConfigParser import SafeConfigParser as ConfigParser
from ConfigParser import NoOptionError, NoSectionError
import codecs

# 5% duty -- 1ms forward
# 7.5 duty -- 1.5ms stop
# 10% duty -- 2ms reverse


print "Starting sumoServo process"
pid = os.getpid()
#pin = sys.argv
#print(str(pin[1]) +' '+ str(pin[2]))

#RIGHT = pin[1]
#LEFT = pin[2]

config_file = '/etc/sumorobot/sumorobot.ini'
config = ConfigParser()

with codecs.open(config_file, 'r', encoding='utf-8') as fh:
    config.readfp(fh)
#config.read(config_file, encoding='utf-8')
switchTurning = config.getint("sumorobot","switchTurning")
switchFwRw = config.getint("sumorobot","switchFwRw")

RIGHT = config.get("ChipIO","motor_right")
LEFT = config.get("ChipIO","motor_left")

FW_DUTY = 1
RW_DUTY = 8

if switchMotors:
    FW_DUTY, RW_DUTY = RW_DUTY, FW_DUTY

if switchFwRw:
    RIGHT, LEFT = LEFT, RIGHT


with open('/var/tmp/sumoServoPid.txt', 'w') as f:
    f.write(str(pid))

def unexport(pin):
    if os.path.exists("/sys/class/gpio/gpio{}".format(pin)):
        with open("/sys/class/gpio/unexport", "w") as fh:
                fh.write(str(pin))

#Unexport motor right pin
unexport(config.getint("PythonIO","motor_right"))

#Unexport motor left pin
unexport(config.getint("PythonIO","motor_left"))

PWM.start(RIGHT, 0, 50) #parem ratas
PWM.start(LEFT, 0, 50) #vasak ratas

def forward(signum, frame):
    PWM.set_duty_cycle(RIGHT, FW_DUTY)
    PWM.set_duty_cycle(LEFT, RW_DUTY)

def backward(signum, frame):
    PWM.set_duty_cycle(RIGHT, RW_DUTY)
    PWM.set_duty_cycle(LEFT, FW_DUTY)

def stop(signum, frame):
    PWM.set_duty_cycle(RIGHT, 0)
    PWM.set_duty_cycle(LEFT, 0)

def left(signum, frame):
    PWM.set_duty_cycle(RIGHT, FW_DUTY)
    PWM.set_duty_cycle(LEFT, FW_DUTY)

def right(signum, frame):
    PWM.set_duty_cycle(RIGHT, RW_DUTY)
    PWM.set_duty_cycle(LEFT, RW_DUTY)

signal.signal(30, forward)
signal.signal(10, backward)
signal.signal(16, stop)
signal.signal(31, right)
signal.signal(12, left)

#if not os.fork():
#    print "Hello I am", os.getpid()
while True:
    sleep(9999)

