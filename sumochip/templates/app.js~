var codemirror = {};
var workspace = {};
init();


function init() {
    switchToBlockly();
    document.getElementById("content").style.display = "initial";
    document.getElementById("loading").style.display = "none";

    // blockly injection
    injectBlockly(); // Silveri kood

    // codemirror injection
    var codemirrrorDiv = document.getElementById("codemirrorDiv");
    codemirror = CodeMirror(codemirrrorDiv, {
        value: "-- kirjuta Lua koodi\n gpio.write(1, 1);\n print(\"highlights\");",
        mode: "lua",
        lineNumbers: true
    });

    var socketStatus = document.getElementById("socketStatus");

    // websocket
    /*
    var socket = new WebSocket('ws://192.168.0.1');
    socket.onopen = function (event) {
        socketStatus.innerHTML = 'Connected to: ' + event.currentTarget.URL;
        socketStatus.className = 'connected';
    };
    socket.onerror = function (error) {
        console.log('WebSocket Error: ' + error);
        socketStatus.innerHTML = "Ã¼hendus puudub";
        socketStatus.className = 'disconnected';
    };
    */

}

function switchToBlockly() {
    document.getElementById("blockly").style.display = "initial";
    document.getElementById("codemirror").style.display = "none";
    document.getElementById("manual").style.display = "none";

}
function switchToCodemirror() {
    document.getElementById("blockly").style.display = "none";
    document.getElementById("codemirror").style.display = "initial";
    document.getElementById("manual").style.display = "none";

    var code = Blockly.JavaScript.workspaceToCode(workspace);
    codemirror.setValue(code);
    codemirror.refresh();

}

function switchToManual() {
    document.getElementById("blockly").style.display = "none";
    document.getElementById("codemirror").style.display = "none";
    document.getElementById("manual").style.display = "initial";
}

function injectBlockly() {
    Blockly.HSV_SATURATION = 0.8;
    Blockly.HSV_VALUE = 0.80;

    /* MOVE */
    Blockly.Blocks.sumorobot_move = {
        helpUrl: 'https://codesnail.koodur.com/robokoding/',
        init: function () {
            this.setColour(230);
            this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown(this.VALUES), 'MOVE');
            this.setPreviousStatement(true);
            this.setNextStatement(true);
            this.setTooltip('move to chosen direction');

        }
    };
    Blockly.Blocks.sumorobot_move.VALUES =
		[[Blockly.Msg.CONTROLS_SUMOROBOT_FORWARD + ' \u2191', 'forward'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_BACKWARD + ' \u2193', 'backward'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_RIGHT + ' \u21BB', 'right'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_LEFT + ' \u21BA', 'left'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_STOP, 'stop']];
    Blockly.JavaScript.sumorobot_move = function () {
        var value = this.getFieldValue('MOVE');
        return 'sumorobot.' + value + '();\n';
    };

    /* DELAY */
    Blockly.Blocks.sumorobot_delay = {
        helpUrl: 'https://codesnail.koodur.com/robokoding/',
        init: function () {
            this.setColour(58);
            this.appendDummyInput().appendField(Blockly.Msg.CONTROLS_SUMOROBOT_DELAY)
				.appendField(new Blockly.FieldTextInput('1000', Blockly.FieldTextInput.numberValidator), 'DELAY');
            this.setPreviousStatement(true);
            this.setNextStatement(true);
            this.setTooltip('continue moving to chosen direction');
        }
    };
    Blockly.JavaScript.sumorobot_delay = function () {
        var value = this.getFieldValue('DELAY');
        return 'sumorobot.delay(' + value + ');\n';
    };

    /* ENEMY */
    Blockly.Blocks.sumorobot_enemy = {
        helpUrl: 'https://codesnail.koodur.com/robokoding/',
        init: function () {
            this.setColour(0);
            this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown(this.VALUES), 'ENEMY');
            this.setOutput(true, 'Boolean');
            this.setTooltip('detect enemy');
        }
    };
    Blockly.Blocks.sumorobot_enemy.VALUES =
		[[Blockly.Msg.CONTROLS_SUMOROBOT_ENEMY_LEFT, 'LEFT'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_ENEMY_RIGHT, 'RIGHT'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_ENEMY_FRONT, 'FRONT']];
    Blockly.JavaScript.sumorobot_enemy = function () {
        var value = this.getFieldValue('ENEMY');
        return ['sumorobot.isEnemy(' + value + ')', Blockly.JavaScript.ORDER_ATOMIC];
    };

    /* LINE */
    Blockly.Blocks.sumorobot_line = {
        helpUrl: 'https://codesnail.koodur.com/robokoding/',
        init: function () {
            this.appendDummyInput()
				.appendField(new Blockly.FieldDropdown(this.VALUES), 'LINE');
            this.setOutput(true, 'Boolean');
            this.setTooltip('detect line');
        }
    };
    Blockly.Blocks.sumorobot_line.VALUES =
		[[Blockly.Msg.CONTROLS_SUMOROBOT_LINE_LEFT, 'LEFT'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_LINE_RIGHT, 'RIGHT'],
		[Blockly.Msg.CONTROLS_SUMOROBOT_LINE_FRONT, 'FRONT']];
    Blockly.JavaScript.sumorobot_line = function () {
        var value = this.getFieldValue('LINE');
        return ['sumorobot.isLine(' + value + ')', Blockly.JavaScript.ORDER_ATOMIC];
    };

    /* inject Blobkly */
    workspace = Blockly.inject(document.getElementById('blocklyArea'), {
        path: "/blockly/",
        trashcan: true,
        toolbox: '<xml id="toolbox" style="display: none;">' +
			'<block type="controls_if"></block>' +
			'<block type="sumorobot_move"><title name="MOVE">forward</title></block>' +
			'<block type="sumorobot_enemy"><title name="ENEMY">FRONT</title></block>' +
			'<block type="sumorobot_line"><title name="LINE">FRONT</title></block>' +
			'<block type="sumorobot_delay"></block></xml>'
    });
    
}
